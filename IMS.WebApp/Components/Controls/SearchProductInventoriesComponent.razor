@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
<div class="input-group">
    <input 
        class="form-control" 
        placeholder="Search something to search"
        @bind-value="this.searchFilter"
        @bind-value:event="oninput"
    >
    </input>
    <button type="button" class="btn-success input-group-text" @onclick="HandleSearch">Search</button>
</div>

@if (inventories?.Count > 0)
{
    <div class="search-result">
        <ul>
            @foreach (var inv in inventories)
            {
                <li @key="inv.Id" @onclick="() => { HandleSelectInventory(inv); }">
                    @inv.Name
                </li>
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public EventCallback<Inventory> OnInventorySelected { get; set; }

    private string _searchFilter = string.Empty;
    private string searchFilter 
    {
        get => _searchFilter;
        set
        {
            _searchFilter = value;
            _ = HandleSearch();
        }
    }
    private List<Inventory> inventories = new List<Inventory>(); 

    private async Task HandleSearch()
    {
        await Task.Delay(1000);
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(searchFilter)).ToList();

        StateHasChanged();
    }

    private async Task HandleSelectInventory(Inventory inventory)
    {
        await OnInventorySelected.InvokeAsync(inventory);
        inventories = new List<Inventory>();
    }
}
