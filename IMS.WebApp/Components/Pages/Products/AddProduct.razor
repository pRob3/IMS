@page "/products/add"
@attribute [Authorize(Policy = "Inventory")]
@rendermode InteractiveServer

@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<h3>Add Product</h3>
<br />

<EditForm Model="product" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText id="name" class="form-control" @bind-Value="product.Name" />
        <ValidationMessage For="@(() => product.Name)" />
    </div>

    <div class="form-group">
        <label for="quantity">Product Quantity</label>
        <InputNumber id="quantity" class="form-control" @bind-Value="product.Quantity" />
        <ValidationMessage For="@(() => product.Quantity)" />
    </div>

    <div class="form-group">
        <label for="price">Product Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="product.Price" />
        <ValidationMessage For="@(() => product.Price)" />
    </div>
    <div class="form-group">
        <label for="inventories">Inventories</label>
        <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <a href="/products" class="btn btn-primary">Cancel</a>

</EditForm>

@code {
    private Product product { get; set; } = new Product();

    private async Task Save()
    {
        await AddProductUseCase.ExecuteAsync(product);

        NavigationManager.NavigateTo("/products");
    }
}
