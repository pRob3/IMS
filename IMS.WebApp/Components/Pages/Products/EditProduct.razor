@page "/products/edit/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase UpdateProductUseCase

<h3>Edit Product</h3>
<br />
@if (product is not null)
{

    <EditForm Model="product" OnValidSubmit="Update">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" class="form-control" @bind-Value="product.Name" />
            <ValidationMessage For="@(() => product.Name)" />
        </div>

        <div class="form-group">
            <label for="quantity">Product Quantity</label>
            <InputNumber id="quantity" class="form-control" @bind-Value="product.Quantity" />
            <ValidationMessage For="@(() => product.Quantity)" />
        </div>

        <div class="form-group">
            <label for="price">Product Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="product.Price" />
            <ValidationMessage For="@(() => product.Price)" />
        </div>
        <div class="form-group">
            <label for="inventories">Inventories</label>
            <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
        </div>

        <br />
        <button type="submit" class="btn btn-primary">Update</button>
        <a href="/products" class="btn btn-primary">Cancel</a>

    </EditForm>
}
@code {
    private Product? product { get; set; }

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        product = await ViewProductByIdUseCase.ExecuteAsync(Id);
    }

    private async Task Update()
    {
        if(product is null)
        {
            return;
        }

        await UpdateProductUseCase.ExecuteAsync(product);
        NavigationManager.NavigateTo("/products");
    }
}
