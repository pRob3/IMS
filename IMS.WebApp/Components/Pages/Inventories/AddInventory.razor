@page "/inventories/add"
@inject IAddInventoryUseCase AddInventoryUseCase
@inject NavigationManager NavigationManager

<h3>Add Inventory</h3>
<br />

<EditForm Model="inventory" FormName="formInventory" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name" class="form-control" @bind-Value="inventory.Name" />
        <ValidationMessage For="@(() => inventory.Name)" />
    </div>

    <div class="form-group">
        <label for="quantity">Inventory Quantity</label>
        <InputNumber id="quantity" class="form-control" @bind-Value="inventory.Quantity" />
        <ValidationMessage For="@(() => inventory.Quantity)" />
    </div>

    <div class="form-group">
        <label for="price">Inventory Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="inventory.Price" />
        <ValidationMessage For="@(() => inventory.Price)" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <a href="/inventories" class="btn btn-primary">Cancel</a>

</EditForm>

@code {
    [SupplyParameterFromForm]
    private InventoryViewModel inventory { get; set; } = new InventoryViewModel();

    private async Task Save()
    {
        var inv = new Inventory
        {
            Id = inventory.Id,
            Name = inventory.Name,
            Quantity = inventory.Quantity,
            Price = inventory.Price
        };

        await AddInventoryUseCase.ExecuteAsync(inv);

        NavigationManager.NavigateTo("/inventories");
    }
}
